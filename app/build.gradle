apply plugin: 'com.android.application'

android {
    compileSdkVersion 25
    buildToolsVersion "26.0.2"
    defaultConfig {
        flavorDimensions "default"
        applicationId "com.example.gviswa200.myapplication"
        minSdkVersion 21
        targetSdkVersion 25
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
       // testInstrumentationRunner "com.example.gviswa200.myapplication.cucumber.runner.CucumberTestRunner"
    }
    productFlavors {
        flavor1 {
            applicationId 'com.example.gviswa200.myapplication.flavor1'
            testInstrumentationRunner "com.example.gviswa200.myapplication.cucumber.runner.CucumberTestRunner"
        }
        flavor2 {
            applicationId 'com.example.gviswa200.myapplication.flavor2'
        }
    }


    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            debuggable true
            buildConfigField "String", "TEST_TAGS", "\"${getTestTags()}\""
        }
    }
    sourceSets { main { assets.srcDirs = ['src/main/assets', 'src/main/assets/'] } }

    compileOptions {
        sourceCompatibility=1.7
        targetCompatibility =1.7
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile 'com.android.support:appcompat-v7:25.3.1'
    compile 'com.android.support.constraint:constraint-layout:1.0.2'
    testCompile 'junit:junit:4.12'
    androidTestCompile('com.android.support.test.espresso:espresso-contrib:2.2.2') {
        exclude group: 'com.android.support', module: 'support-annotations'
        exclude group: 'com.android.support', module: 'support-v4'
        exclude group: 'com.android.support', module: 'recyclerview-v7'
        exclude group: 'com.android.support', module: 'appcompat-v7'
        exclude group: 'com.android.support', module: 'design'
    }
    // Cucumber
    androidTestCompile('info.cukes:cucumber-android:1.2.5') {
        exclude module: 'cucumber-jvm-deps'
    }
    androidTestCompile('info.cukes:cucumber-picocontainer:1.2.5') {
        exclude module: 'cucumber-jvm-deps'
    }
    androidTestImplementation 'com.android.support.test.uiautomator:uiautomator-v18:2.1.3'
    androidTestCompile 'info.cukes:cucumber-jvm-deps:1.0.5'
    // Screenshots
    androidTestCompile 'com.squareup.spoon:spoon-client:1.7.1'
}

// Task to retrieve Cucumber test reports
// The report path in this task depends on the path used in CucumberTestCase.java under @CucumberOptions
// The report path for emulator and real device differ depending on read permissions
// and SD-card presence respectively
gradle.taskGraph.afterTask { task, state ->
    if ((task == connectedAndroidTest) || (task == connectedCheck)|| (task == connectedFlavor1DebugAndroidTest)) {
        def reportDir = new File(project.buildDir, "cucumber-reports")
        if (!reportDir.exists()) {
            reportDir.mkdirs()
        }
        println 'Retrieving Cucumber test report to ' + project.buildDir
        def processBuilder = new ProcessBuilder(
                ['adb', 'pull', '/sdcard/Pictures/Test/', reportDir.getAbsolutePath()])
        processBuilder.start()
    }
}

// Read Cucumber tags from command line like: ./gradlew connectedAndroidTest -Dtags="@login-scenarios,@kitkat"
def getTestTags() {
    return project.hasProperty("tags") ? project.getProperties().get("tags") : ""
}

android.applicationVariants.all { variant ->
    def applicationId = variant.applicationId
    def adb = android.getAdbExe().toString()
    def variantName = variant.name.capitalize()
    def grantPermissionTask = tasks.create("grant${variantName}Permissions") << {
        "${adb} devices".execute().text.eachLine {
            if (it.endsWith("device")){
                def device = it.split()[0]
                println "Granting permissions on devices ${device}"
                "${adb} -s ${device} shell pm grant ${applicationId} android.permission.WRITE_EXTERNAL_STORAGE".execute()
                "${adb} -s ${device} shell pm grant ${applicationId} android.permission.READ_EXTERNAL_STORAGE".execute()
            }
        }
    }
    connectedAndroidTest.dependsOn grantPermissionTask
    connectedFlavor1DebugAndroidTest.dependsOn grantPermissionTask
}
